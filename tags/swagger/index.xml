<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>swagger on Realsangil</title><link>https://blog.realsangil.net/tags/swagger/</link><description>Recent content in swagger on Realsangil</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 22 Dec 2019 16:36:37 +0900</lastBuildDate><atom:link href="https://blog.realsangil.net/tags/swagger/index.xml" rel="self" type="application/rss+xml"/><item><title>Swagger 파일 분리하여 관리하기</title><link>https://blog.realsangil.net/posts/2019-12-22-swagger_file_split/</link><pubDate>Sun, 22 Dec 2019 16:36:37 +0900</pubDate><guid>https://blog.realsangil.net/posts/2019-12-22-swagger_file_split/</guid><description>&lt;p>Swagger로 API 문서를 작성하다 보면 스팩 파일(swagger.yaml)이 너무 길어져서 관리가 어려울 때가 있습니다. 그래서 swagger에서는 &lt;code>$ref&lt;/code>를 제공해 parameter와 ruqestbody, response 등을 모듈처럼 사용할 수 있도록 제공하지만 이것 또한 API가 많아지면 스펙파일이 길어지기 마련이죠. 그래서 parameter와 ruqestbody, response은 물론 엔드포인트들을 파일로 분리해서 모듈처럼 관리하여 쉽게 유지보수 하는 걸 이번 포스트에서 해보려고 합니다. 모든 개발에는 유지보수가 가장 중요한 법이니까요.&lt;/p></description></item></channel></rss>