<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>golang on Sangil's Blog</title><link>https://blog.psi59.com/tags/golang/</link><description>Recent content in golang on Sangil's Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 21 Oct 2023 03:05:07 +0900</lastBuildDate><atom:link href="https://blog.psi59.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Lambda 로컬 디버깅 (provided.al2 Runtime)</title><link>https://blog.psi59.com/posts/2023-10-21-lambda-local-debugging/</link><pubDate>Sat, 21 Oct 2023 03:05:07 +0900</pubDate><guid>https://blog.psi59.com/posts/2023-10-21-lambda-local-debugging/</guid><description>&lt;p>이 포스트는 2023년 12월 31일에 &lt;code>go1.x&lt;/code> 런타임이 지원 중단됨에 따라 &lt;code>provided.al2&lt;/code> 런타임으로 마이그레이션한 람다 함수를 로컬에서 디버깅하는 방법에 대한 포스트.&lt;/p></description></item><item><title>AWS Lambda 로컬 디버깅 (Go1.x Runtime)</title><link>https://blog.psi59.com/posts/2023-10-20-lambda-local-debugging/</link><pubDate>Fri, 20 Oct 2023 23:00:07 +0900</pubDate><guid>https://blog.psi59.com/posts/2023-10-20-lambda-local-debugging/</guid><description>&lt;p>Go1.x 런타임을 사용한 AWS Lambda function을 로컬에서 디버깅하는 방법에 대한 포스팅입니다.&lt;/p></description></item><item><title>Golang TestMain이란?</title><link>https://blog.psi59.com/posts/2021-12-29-golang-test/</link><pubDate>Wed, 29 Dec 2021 20:34:00 +0900</pubDate><guid>https://blog.psi59.com/posts/2021-12-29-golang-test/</guid><description>&lt;p>이 포스트는 &lt;code>TestMain&lt;/code>가 무엇이며, 어떤 식으로 사용할 수 있는지에 대해서 정리한 내용입니다.&lt;/p></description></item><item><title>도커 컨테이너로 배포된 서버를 우아하게 종료하기✨</title><link>https://blog.psi59.com/posts/2020-11-14-docker-container-graceful-shutdown/</link><pubDate>Sat, 14 Nov 2020 09:30:00 +0900</pubDate><guid>https://blog.psi59.com/posts/2020-11-14-docker-container-graceful-shutdown/</guid><description>&lt;p>프로덕션 환경에서 서버를 정상적으로 종료되는 것은 아주 중요합니다.
예를 들어 이미 수신한 요청을 온전히 처리하지 않고 서버가 종료될 때 클라이언트는 &lt;code>502&lt;/code>나 &lt;code>504&lt;/code> 에러를 수신하게 됩니다.
가장 기본적인 방법으로는 프로세스 종료 SIGNAL 수신 후 일정 시간을 기다린 후에 서버를 종료하는 방법이 있습니다.&lt;/p></description></item><item><title>Concurrency와 Parallelism의 차이</title><link>https://blog.psi59.com/posts/2020-02-06-concurrency-parallelism/</link><pubDate>Thu, 06 Feb 2020 09:30:00 +0900</pubDate><guid>https://blog.psi59.com/posts/2020-02-06-concurrency-parallelism/</guid><description>최근에 golang을 처음부터 다시 공부하면서 헷갈렸던 Concurrency와 Parallelism의 차이점과 관계에 대해 개인적으로 공부한 내용을 간단한 예시와 함께 정리한 글입니다.
&amp;ldquo;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.&amp;rdquo;
- Rob Pike, Concurrency is not Parallelism
Go언어 주요 개발자 중 한명인 &amp;lsquo;롭 파이크&amp;rsquo;는 말을 직역하면 &amp;lsquo;동시성은 한번에 여러가지 일을 다루는 것이다. 병렬성은 한번에 여러가지 일을 하는 것이다.&amp;rsquo;
동시성(Concurrency) Concurrency 동시성은 앞에서 언급했듯이 많은 일을 한번에 다루는 걸 의미합니다.</description></item><item><title>Go의 init 함수 간단 소개!!</title><link>https://blog.psi59.com/posts/2018-03-13-go-init-function/</link><pubDate>Tue, 13 Mar 2018 07:52:02 +0900</pubDate><guid>https://blog.psi59.com/posts/2018-03-13-go-init-function/</guid><description>&lt;p>Go언어의 init function의 동작과 우선 순위에 대해 정리한 내용입니다.&lt;/p></description></item></channel></rss>