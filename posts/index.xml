<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Realsangil</title><link>https://realsangil.github.io/posts/</link><description>Recent content in Posts on Realsangil</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 29 Nov 2021 23:54:00 +0900</lastBuildDate><atom:link href="https://realsangil.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[Real MySQL 8.0] #2 설치와 설정</title><link>https://realsangil.github.io/posts/2021-11-29-real-mysql-2/</link><pubDate>Mon, 29 Nov 2021 23:54:00 +0900</pubDate><guid>https://realsangil.github.io/posts/2021-11-29-real-mysql-2/</guid><description>MySQL 서버 폴더 구조 bin: 서버와 클라이언트, 유틸리티를 위한 디렉토리 include: C/C++ 헤더 파일들이 저장된 디렉토리 lib: 라이브러리 파일들이 저장된 디렉토리 share: 다양한 지원 파일들이 저장되어 있으며, 에러 메시지나 샘플 설정 파일이 디렉토리 시작과 종료 서비스 시작, 종료 및 상태 확인 # 시작 systemctl start mysqld # 종료 systemctl stop mysqld # 상태 확인 systemctl status mysqld 원격으로 SHUTDOWN MySQL을 원격으로 종료하기 위해서는 MySQL에 로그인 한 상태에서 SHUTDOWN 명령어를 실행하면 된다.</description></item><item><title>도커 컨테이너로 배포된 서버를 우아하게 종료하기✨</title><link>https://realsangil.github.io/posts/2020-11-14-docker-container-graceful-shutdown/</link><pubDate>Sat, 14 Nov 2020 09:30:00 +0900</pubDate><guid>https://realsangil.github.io/posts/2020-11-14-docker-container-graceful-shutdown/</guid><description>프로덕션 환경에서 서버를 정상적으로 종료되는 것은 아주 중요합니다. 예를 들어 이미 수신한 요청을 온전히 처리하지 않고 서버가 종료될 때 클라이언트는 502나 504 에러를 수신하게 됩니다. 가장 기본적인 방법으로는 프로세스 종료 SIGNAL 수신 후 일정 시간을 기다린 후에 서버를 종료하는 방법이 있습니다.
서버 종료 요구사항 서버를 정상적으로 종료하기 위해서는 기본적으로 2가지의 요구사항이 존재합니다.
서버가 종료될 때는 수신한 요청을 모두 응답한 후 종료. 서버가 닫힌 후에는 요청을 수신하면 안됨. Go에서 Graceful Shutdown 구현하기 아래는 요청을 수신하고 5초 뒤 OK 메시지를 반환하는 간단한 예제 입니다.</description></item><item><title>Concurrency와 Parallelism의 차이</title><link>https://realsangil.github.io/posts/2020-02-06-concurrency-parallelism/</link><pubDate>Thu, 06 Feb 2020 09:30:00 +0900</pubDate><guid>https://realsangil.github.io/posts/2020-02-06-concurrency-parallelism/</guid><description>최근에 golang을 처음부터 다시 공부하면서 헷갈렸던 Concurrency와 Parallelism의 차이점과 관계에 대해 개인적으로 공부한 내용을 간단한 예시와 함께 정리한 글입니다.
&amp;ldquo;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.&amp;rdquo;
- Rob Pike, Concurrency is not Parallelism
Go언어 주요 개발자 중 한명인 &amp;lsquo;롭 파이크&amp;rsquo;는 말을 직역하면 &amp;lsquo;동시성은 한번에 여러가지 일을 다루는 것이다. 병렬성은 한번에 여러가지 일을 하는 것이다.&amp;rsquo;
동시성(Concurrency) Concurrency 동시성은 앞에서 언급했듯이 많은 일을 한번에 다루는 걸 의미합니다.</description></item><item><title>OpenSource 라이센스 간단 정리</title><link>https://realsangil.github.io/posts/2020-01-30-summarize-opensource-license/</link><pubDate>Thu, 30 Jan 2020 07:25:11 +0900</pubDate><guid>https://realsangil.github.io/posts/2020-01-30-summarize-opensource-license/</guid><description>&lt;p>이 포스트는 오픈소스에 대한 이해를 돕고자 &lt;a href="https://www.olis.or.kr/">OLIS&lt;/a>의 &lt;a href="https://www.olis.or.kr/license/licenseGuide.do">오픈소스 라이선스 가이드&lt;/a>를 베이스로 수집한 정보를 간단하게 정리한 내용입니다.&lt;/p>
&lt;p>따라서, 좀 더 자세한 내용을 원하신다면 &lt;em>&lt;a href="https://www.olis.or.kr/license/licenseGuide.do">오픈소스 라이선스 가이드&lt;/a>를 한번 정독하시는 것을 추천합니다.&lt;/em>&lt;/p></description></item><item><title>Go의 init 함수 간단 소개!!</title><link>https://realsangil.github.io/posts/2018-03-13-go-init-function/</link><pubDate>Tue, 13 Mar 2018 07:52:02 +0900</pubDate><guid>https://realsangil.github.io/posts/2018-03-13-go-init-function/</guid><description>오늘은 Go언어의 init function에 대해 얘기해보려 합니다.
init 함수? init 함수는 이름에서 느껴지듯이 무언가를 초기화하는 함수입니다. 일반적으로 init 함수는 다음과 같이 쓸 수 있습니다.
일반적익 초기화 표현식으로 변수를 초기화 할 수 없는 경우. 일회성 계산 프로그램 상태 확인 / 수정 등등&amp;hellip; 그럼 init 함수가 대체 뭐길래 위의 사항과 같이 쓸 수 있는지 설명드리겠습니다. go에서 init 함수는 프로그램 실행시 변수 초기화 다음 호출되는 함수입니다. 각 파일 별로 선언할 수 있지만 직접 호출하거나 참조할 수 없다는 점 이외에 일반 함수들과 같습니다.</description></item></channel></rss>